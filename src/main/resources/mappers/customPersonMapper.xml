<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.javagreenS_khv.dao.CustomPersonDAO">
<!-- 수정 <mapper namespace="org.mybatis.example.BlogMapper"></mapper> -->
	<select id="searchCustomPerson" resultType="com.spring.javagreenS_khv.vo.CustomPersonVO">
	    SELECT * FROM CUSTOM_PERSON WHERE CUSTOM_ID = #{customId}
	</select>
	<select id="searchLogin" resultType="com.spring.javagreenS_khv.vo.CustomPersonLoginVO">
		SELECT 
			ID,  -- primary key
			PASSWORD,
			CUSTOM_ID,  -- foreign key (custom_person TBL)
			(SELECT CUSTOM_NM FROM CUSTOM_PERSON WHERE CUSTOM_ID = CUSTOM_PERSON_LOGIN.CUSTOM_ID) AS CUSTOM_NAME,  -- foreign key (코드TBL)
			CUSTOM_GRADE,
			(SELECT GRADE_NAME FROM CUSTOM_GRADE WHERE GRADE_CODE = CUSTOM_GRADE) AS GRADE_NAME,  -- foreign key (코드TBL)
			POINT,
			VISIT_CNT,
			TODAY_CNT,
			LOGIN_DATE,
			LOGOUT_DATE,
			CREATE_DATE,
			UPDATE_DATE,
			DELETE_DATE 
		FROM CUSTOM_PERSON_LOGIN 
		WHERE ID = #{id} AND PASSWORD = #{pwd} AND DELETE_DATE IS NULL ;  -- primary key(id) indexing	    
	</select>
	<update id="updateTodayCnt">
		UPDATE CUSTOM_PERSON_LOGIN SET TODAY_CNT = 0, LOGIN_DATE = DEFAULT, LOGIN_USER = #{id}, UPDATE_DATE = DEFAULT, UPDATE_USER = #{id} WHERE ID = #{id} AND CUSTOM_ID = #{customId} AND DELETE_DATE IS NULL
	</update>
	<update id="updateVisitCntAndTodayCnt">
		UPDATE CUSTOM_PERSON_LOGIN SET VISIT_CNT = VISIT_CNT+1, TODAY_CNT = TODAY_CNT+1, UPDATE_DATE = DEFAULT, UPDATE_USER = #{id} WHERE ID = #{id} AND CUSTOM_ID = #{customId} AND DELETE_DATE IS NULL
	</update>
	<update id="updatePoint">
		UPDATE CUSTOM_PERSON_LOGIN SET POINT = POINT + 100, UPDATE_DATE = DEFAULT, UPDATE_USER = #{id} WHERE ID = #{id} AND CUSTOM_ID = #{customId} AND DELETE_DATE IS NULL
	</update>
	<update id="updateCustomPersonLoginUserDel">
		UPDATE CUSTOM_PERSON_LOGIN SET DELETE_DATE = DEFAULT, DELETE_USER = #{id} , LOGOUT_DATE = DEFAULT, LOGOUT_USER = #{id}  WHERE ID = #{id} AND CUSTOM_ID = #{customId}
	</update>
	<update id="updateLogout">
		UPDATE CUSTOM_PERSON_LOGIN SET LOGOUT_DATE = DEFAULT, LOGOUT_USER = #{id} WHERE ID = #{id} AND CUSTOM_ID = #{customId} AND DELETE_DATE IS NULL 
	</update>
	<select id="loginIdCheck" resultType="boolean">
		SELECT IF(COUNT(ID) > 0, TRUE, FALSE) AS ISEXIST_ID FROM CUSTOM_PERSON_LOGIN WHERE ID= #{id};
	</select>
	<select id="emailCheck" resultType="boolean">
		SELECT IF(COUNT(EMAIL) > 0, TRUE, FALSE) AS ISEXIST_EMAIL FROM CUSTOM_PERSON WHERE EMAIL = #{email}
	</select>
	<select id="juminNoCheck" resultType="boolean">
		SELECT IF(COUNT(JUMIN_NO) > 0, TRUE, FALSE) AS ISEXIST_JUMIN_NO FROM CUSTOM_PERSON WHERE JUMIN_NO = #{juminNo} -- Unique key(jumin_no) indexing
	</select>
	<select id="obtainCustomId" resultType="int">
		SELECT IFNULL(MAX(CUSTOM_ID) + 1, (CASE WHEN #{customKindCode} = 1 OR #{customKindCode} = 2 THEN 100 ELSE #{customKindCode} END) * 100000 + 1) AS OBT_CUSTOM_ID  
		FROM CUSTOM_PERSON 
		WHERE SUBSTRING(CUSTOM_ID, 1, 3) = CASE WHEN #{customKindCode} = 1 OR #{customKindCode} = 2 THEN 100 ELSE #{customKindCode} END; 
		-- primary key(custom_id) indexing을 조건절에서 SUBSTRING에 사용하면 조회속도가 높을것 같기도 하는데요
	</select>
	<insert id="insertCustomPersonAndCustomPersonLogin">
		INSERT INTO CUSTOM_PERSON VALUES ( 
			DEFAULT, 
			#{personVo.custom_id},   -- create_user	
			#{personVo.custom_nm},  
			2,
			#{personVo.custom_kind_cd},  
			'P',
			
		<if test='#{personVo.job} == "기타"'>
			#{personVo.txtJob},  
		</if>
		<if test='#{personVo.job} != "기타"'>
			#{personVo.job},  
		</if>

			#{personVo.hobby},  
			#{personVo.birth_date},  
			#{personVo.jumin_no},  
			#{personVo.gender},  
			#{personVo.tel_no},  
			#{personVo.hp_no},  
			#{personVo.email},  
			#{personVo.post_code},  
			#{personVo.road_addr},  
			#{personVo.extra_addr},  
			#{personVo.detail_addr},  
			#{personVo.memo},  
			DEFAULT, 
			#{personVo.custom_id},   -- create_user	
			NULL, 
			NULL, 
			NULL, 
			NULL );
	
		INSERT INTO CUSTOM_PERSON_LOGIN VALUES ( #{loginVo.id}, #{loginVo.encrypt_pwd}, #{loginVo.custom_id}, 'P', DEFAULT, DEFAULT, DEFAULT, NULL, NULL, NULL, NULL, DEFAULT, #{loginVo.id}, NULL, NULL, NULL, NULL);
	</insert>
</mapper>